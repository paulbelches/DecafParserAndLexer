# Generated from decaf.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2+")
        buf.write("\u00f8\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4")
        buf.write("\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\3\t\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\f\3")
        buf.write("\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\16\3")
        buf.write("\16\3\17\3\17\3\20\3\20\3\21\3\21\3\21\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\30")
        buf.write("\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35")
        buf.write("\3\36\3\36\3\37\3\37\3\37\3 \3 \3 \3!\3!\3!\3\"\3\"\3")
        buf.write("\"\3#\3#\3#\3$\3$\3$\3%\3%\3%\3%\3%\3&\3&\3&\3&\3&\3&")
        buf.write("\3\'\3\'\3\'\7\'\u00de\n\'\f\'\16\'\u00e1\13\'\3(\3(\7")
        buf.write("(\u00e5\n(\f(\16(\u00e8\13(\3)\3)\3)\3)\3*\3*\3+\3+\3")
        buf.write(",\6,\u00f3\n,\r,\16,\u00f4\3,\3,\2\2-\3\3\5\4\7\5\t\6")
        buf.write("\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20")
        buf.write("\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65")
        buf.write("\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S\2U\2W+\3\2")
        buf.write("\4\5\2C\\aac|\5\2\13\f\17\17\"\"\2\u00f9\2\3\3\2\2\2\2")
        buf.write("\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3")
        buf.write("\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2")
        buf.write("\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2")
        buf.write("\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3")
        buf.write("\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61")
        buf.write("\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2")
        buf.write("\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3")
        buf.write("\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M")
        buf.write("\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2W\3\2\2\2\3Y\3\2\2\2\5")
        buf.write("_\3\2\2\2\7g\3\2\2\2\ti\3\2\2\2\13k\3\2\2\2\rm\3\2\2\2")
        buf.write("\17o\3\2\2\2\21q\3\2\2\2\23x\3\2\2\2\25|\3\2\2\2\27\u0081")
        buf.write("\3\2\2\2\31\u0089\3\2\2\2\33\u008e\3\2\2\2\35\u0090\3")
        buf.write("\2\2\2\37\u0092\3\2\2\2!\u0094\3\2\2\2#\u0097\3\2\2\2")
        buf.write("%\u009c\3\2\2\2\'\u00a2\3\2\2\2)\u00a9\3\2\2\2+\u00ab")
        buf.write("\3\2\2\2-\u00ad\3\2\2\2/\u00af\3\2\2\2\61\u00b1\3\2\2")
        buf.write("\2\63\u00b3\3\2\2\2\65\u00b5\3\2\2\2\67\u00b7\3\2\2\2")
        buf.write("9\u00b9\3\2\2\2;\u00bb\3\2\2\2=\u00bd\3\2\2\2?\u00c0\3")
        buf.write("\2\2\2A\u00c3\3\2\2\2C\u00c6\3\2\2\2E\u00c9\3\2\2\2G\u00cc")
        buf.write("\3\2\2\2I\u00cf\3\2\2\2K\u00d4\3\2\2\2M\u00da\3\2\2\2")
        buf.write("O\u00e2\3\2\2\2Q\u00e9\3\2\2\2S\u00ed\3\2\2\2U\u00ef\3")
        buf.write("\2\2\2W\u00f2\3\2\2\2YZ\7e\2\2Z[\7n\2\2[\\\7c\2\2\\]\7")
        buf.write("u\2\2]^\7u\2\2^\4\3\2\2\2_`\7R\2\2`a\7t\2\2ab\7q\2\2b")
        buf.write("c\7i\2\2cd\7t\2\2de\7c\2\2ef\7o\2\2f\6\3\2\2\2gh\7}\2")
        buf.write("\2h\b\3\2\2\2ij\7\177\2\2j\n\3\2\2\2kl\7=\2\2l\f\3\2\2")
        buf.write("\2mn\7]\2\2n\16\3\2\2\2op\7_\2\2p\20\3\2\2\2qr\7u\2\2")
        buf.write("rs\7v\2\2st\7t\2\2tu\7w\2\2uv\7e\2\2vw\7v\2\2w\22\3\2")
        buf.write("\2\2xy\7k\2\2yz\7p\2\2z{\7v\2\2{\24\3\2\2\2|}\7e\2\2}")
        buf.write("~\7j\2\2~\177\7c\2\2\177\u0080\7t\2\2\u0080\26\3\2\2\2")
        buf.write("\u0081\u0082\7d\2\2\u0082\u0083\7q\2\2\u0083\u0084\7q")
        buf.write("\2\2\u0084\u0085\7n\2\2\u0085\u0086\7g\2\2\u0086\u0087")
        buf.write("\7c\2\2\u0087\u0088\7p\2\2\u0088\30\3\2\2\2\u0089\u008a")
        buf.write("\7x\2\2\u008a\u008b\7q\2\2\u008b\u008c\7k\2\2\u008c\u008d")
        buf.write("\7f\2\2\u008d\32\3\2\2\2\u008e\u008f\7*\2\2\u008f\34\3")
        buf.write("\2\2\2\u0090\u0091\7.\2\2\u0091\36\3\2\2\2\u0092\u0093")
        buf.write("\7+\2\2\u0093 \3\2\2\2\u0094\u0095\7k\2\2\u0095\u0096")
        buf.write("\7h\2\2\u0096\"\3\2\2\2\u0097\u0098\7g\2\2\u0098\u0099")
        buf.write("\7n\2\2\u0099\u009a\7u\2\2\u009a\u009b\7g\2\2\u009b$\3")
        buf.write("\2\2\2\u009c\u009d\7y\2\2\u009d\u009e\7j\2\2\u009e\u009f")
        buf.write("\7k\2\2\u009f\u00a0\7n\2\2\u00a0\u00a1\7g\2\2\u00a1&\3")
        buf.write("\2\2\2\u00a2\u00a3\7t\2\2\u00a3\u00a4\7g\2\2\u00a4\u00a5")
        buf.write("\7v\2\2\u00a5\u00a6\7w\2\2\u00a6\u00a7\7t\2\2\u00a7\u00a8")
        buf.write("\7p\2\2\u00a8(\3\2\2\2\u00a9\u00aa\7?\2\2\u00aa*\3\2\2")
        buf.write("\2\u00ab\u00ac\7\60\2\2\u00ac,\3\2\2\2\u00ad\u00ae\7/")
        buf.write("\2\2\u00ae.\3\2\2\2\u00af\u00b0\7#\2\2\u00b0\60\3\2\2")
        buf.write("\2\u00b1\u00b2\7-\2\2\u00b2\62\3\2\2\2\u00b3\u00b4\7,")
        buf.write("\2\2\u00b4\64\3\2\2\2\u00b5\u00b6\7\61\2\2\u00b6\66\3")
        buf.write("\2\2\2\u00b7\u00b8\7\'\2\2\u00b88\3\2\2\2\u00b9\u00ba")
        buf.write("\7@\2\2\u00ba:\3\2\2\2\u00bb\u00bc\7>\2\2\u00bc<\3\2\2")
        buf.write("\2\u00bd\u00be\7@\2\2\u00be\u00bf\7?\2\2\u00bf>\3\2\2")
        buf.write("\2\u00c0\u00c1\7>\2\2\u00c1\u00c2\7?\2\2\u00c2@\3\2\2")
        buf.write("\2\u00c3\u00c4\7?\2\2\u00c4\u00c5\7?\2\2\u00c5B\3\2\2")
        buf.write("\2\u00c6\u00c7\7#\2\2\u00c7\u00c8\7?\2\2\u00c8D\3\2\2")
        buf.write("\2\u00c9\u00ca\7(\2\2\u00ca\u00cb\7(\2\2\u00cbF\3\2\2")
        buf.write("\2\u00cc\u00cd\7~\2\2\u00cd\u00ce\7~\2\2\u00ceH\3\2\2")
        buf.write("\2\u00cf\u00d0\7v\2\2\u00d0\u00d1\7t\2\2\u00d1\u00d2\7")
        buf.write("w\2\2\u00d2\u00d3\7g\2\2\u00d3J\3\2\2\2\u00d4\u00d5\7")
        buf.write("h\2\2\u00d5\u00d6\7c\2\2\u00d6\u00d7\7n\2\2\u00d7\u00d8")
        buf.write("\7u\2\2\u00d8\u00d9\7g\2\2\u00d9L\3\2\2\2\u00da\u00df")
        buf.write("\5U+\2\u00db\u00de\5U+\2\u00dc\u00de\5S*\2\u00dd\u00db")
        buf.write("\3\2\2\2\u00dd\u00dc\3\2\2\2\u00de\u00e1\3\2\2\2\u00df")
        buf.write("\u00dd\3\2\2\2\u00df\u00e0\3\2\2\2\u00e0N\3\2\2\2\u00e1")
        buf.write("\u00df\3\2\2\2\u00e2\u00e6\5S*\2\u00e3\u00e5\5S*\2\u00e4")
        buf.write("\u00e3\3\2\2\2\u00e5\u00e8\3\2\2\2\u00e6\u00e4\3\2\2\2")
        buf.write("\u00e6\u00e7\3\2\2\2\u00e7P\3\2\2\2\u00e8\u00e6\3\2\2")
        buf.write("\2\u00e9\u00ea\7)\2\2\u00ea\u00eb\5U+\2\u00eb\u00ec\7")
        buf.write(")\2\2\u00ecR\3\2\2\2\u00ed\u00ee\4\62;\2\u00eeT\3\2\2")
        buf.write("\2\u00ef\u00f0\t\2\2\2\u00f0V\3\2\2\2\u00f1\u00f3\t\3")
        buf.write("\2\2\u00f2\u00f1\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4\u00f2")
        buf.write("\3\2\2\2\u00f4\u00f5\3\2\2\2\u00f5\u00f6\3\2\2\2\u00f6")
        buf.write("\u00f7\b,\2\2\u00f7X\3\2\2\2\7\2\u00dd\u00df\u00e6\u00f4")
        buf.write("\3\b\2\2")
        return buf.getvalue()


class decafLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    ID = 38
    NUM = 39
    CHAR = 40
    WS = 41

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'class'", "'Program'", "'{'", "'}'", "';'", "'['", "']'", "'struct'", 
            "'int'", "'char'", "'boolean'", "'void'", "'('", "','", "')'", 
            "'if'", "'else'", "'while'", "'return'", "'='", "'.'", "'-'", 
            "'!'", "'+'", "'*'", "'/'", "'%'", "'>'", "'<'", "'>='", "'<='", 
            "'=='", "'!='", "'&&'", "'||'", "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUM", "CHAR", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "ID", "NUM", 
                  "CHAR", "DIGIT", "LETTER", "WS" ]

    grammarFileName = "decaf.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


