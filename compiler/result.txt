#-------------------------------------
#cout 4
#fib 16
#main 8
#-------------------------------------
.data
output: .asciiz "cout: "
endl: .byte '\n'
.text
add $fp $sp 0 
j main

cout:
#store the return address
sub $sp $fp 4
sw $ra ($sp)
#----------------
sub $fp $sp 4 #alloc the function size 
#pop a param
#LW $t0 t0
lw $t0 -4($sp)
#----------------
#Store the param values
sw $t0 0($fp)
#-----------------------
li $t1 
#-------------Print result --------------------
la $a0, output
li $v0, 4
syscall
lw $a0, 0($fp)
li $v0, 1
syscall
la $a0, endl
li $v0, 4
syscall
#----------------------------------------------
add $fp $fp 4 #dealloc the function size 
lw $ra ($fp) #load the returning address
add $fp $fp 4 #return to the base of the base of the previus method
jr $ra 

fib:
#store the return address
sub $sp $fp 4
sw $ra ($sp)
#----------------
sub $fp $sp 16 #alloc the function size 
#pop a param
#LW $t0 t0
lw $t0 -4($sp)
#----------------
#Store the param values
sw $t0 0($fp)
#-----------------------
addi $t1 $zero 0
add $sp $fp $t1
lw $t2 ($sp)
ble $t2 2 L0
jal L1
L0:
li $t0 1
move $v0 $t0
add $fp $fp 16 #dealloc the function size 
lw $ra ($fp) #load the returning address
add $fp $fp 4 #return to the base of the base of the previus method
jr $ra 
L1:
addi $t1 $zero 4
addi $t2 $zero 0
add $sp $fp $t2
lw $t4 ($sp)
subi $t3 $t4 1
#push a param
sub $sp $fp 8
sw $t3 ($sp)
#----------------
jal fib
move $t0 $v0
move $t1 $t0 #Load
li $t2 4
#store the result
add $sp $fp $t2
sw $t1 ($sp)
#----------------
addi $t3 $zero 8
addi $t4 $zero 0
add $sp $fp $t4
lw $t6 ($sp)
subi $t5 $t6 2
#push a param
sub $sp $fp 8
sw $t5 ($sp)
#----------------
jal fib
move $t0 $v0
move $t1 $t0 #Load
li $t2 8
#store the result
add $sp $fp $t2
sw $t1 ($sp)
#----------------
addi $t3 $zero 12
addi $t4 $zero 4
addi $t5 $zero 8
add $sp $fp $t4
lw $t7 ($sp)
add $sp $fp $t5
lw $t2 ($sp)
add $t6 $t7 $t2
move $t1 $t6 #Load
#store the result
add $sp $fp $t3
sw $t1 ($sp)
#----------------
addi $t7 $zero 12
add $sp $fp $t7
lw $t3 ($sp)
move $v0 $t3
add $fp $fp 16 #dealloc the function size 
lw $ra ($fp) #load the returning address
add $fp $fp 4 #return to the base of the base of the previus method
jr $ra 
li $t1 

main:
#store the return address
sub $sp $fp 4
sw $ra ($sp)
#----------------
sub $fp $sp 8 #alloc the function size 
addi $t0 $zero 0
li $t1 2
#store the result
add $sp $fp $t0
sw $t1 ($sp)
#----------------
addi $t2 $zero 4
addi $t3 $zero 0
#push a param
add $sp $fp $t3
lw $t4 ($sp)
sub $sp $fp 8
sw $t4 ($sp)
#----------------
jal fib
move $t0 $v0
move $t1 $t0 #Load
li $t2 4
#store the result
add $sp $fp $t2
sw $t1 ($sp)
#----------------
addi $t3 $zero 4
#push a param
add $sp $fp $t3
lw $t4 ($sp)
sub $sp $fp 8
sw $t4 ($sp)
#----------------
jal cout
move $t0 $v0
li $t1 
#fin
